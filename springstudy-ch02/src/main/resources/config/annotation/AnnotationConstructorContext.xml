<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- 프로퍼티 대치 변수 설정자(Property Placeholder Configurer)를 설정한다. -->
	<context:property-placeholder 
			location="classpath:config/props/datasource.properties"/>
	
	<!-- 
		스프링에서 annotation 기반 bean wiring을 사용하겠다는 설정으로 
		프로퍼티, 메서드 또는 생성자에 자동으로 와이어링 됨을 의미한다.
		이 설정은 스프링  빈 설정 파일에서 <property>, <constructor-arg> 설정은
		생략할 수 있지만 <bean> 태그를 사용해 명시적으로 bean을 정의해야
		스프링이 annotaion 기반으로 와이어링 할 수 있다는 의미이다.   
	-->
	<context:annotation-config />	
	
	<!-- 
		스프링이 지정한 base-package를 기준으로 컴포넌트(클래스)를 스캔하여 
		자동으로 bean을 생성해 주는 설정으로 <context:annotation-config />가
		수행하는 모든 것을 수행하며 여기에 더해 스프링이 자동으로 bean을 스캔하여
		선언하고 스프링 빈 설정 파일에서 명시적으로 <bean> 태그를 사용하지 않아도 
		정상적으로 annotation 기반으로 와이어링 할 수 있다는 의미이다.
		
		<context:component-scan />는 <context:annotation-config />가
		가지는 모든 기능을 포함하고 있기 때문에 <context:component-scan />을
		사용하면 <context:annotation-config />는 설정할 필요가 없다. 	
	-->
	<context:component-scan 
		base-package="com.springstudy.ch02.annotation" />

	<!--
		스프링 JDBC의 DriverManagerDataSource 타입의 Bean을 선언하고
		위에서 프로퍼티 대치 변수 설정자로 지정한 properties 파일로 부터 읽어온
		데이터를 대치 변수를 사용해 각 프로퍼티에 지정하고 있다.
		p 네임스페이스를 이용해 dataSource의 각 속성에 데이터를 지정하고 있다.
		@Component로 설정된 클래스에 @Autowired로 지정된 DriverManagerDataSource
		타입의 필드나 setter 메서드 또는 생성자의 인수에 주입된다.  
	 -->
	<bean id="dataSource01"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${db.driverClassName}"
		p:url="${db.url}"
		p:username="${db.username}"
		p:password="${db.password}" />
</beans>
